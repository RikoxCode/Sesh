/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root';
import { Route as LoginRouteImport } from './routes/login';
import { Route as AuthenticatedRouteImport } from './routes/_authenticated';
import { Route as AuthenticatedIndexRouteImport } from './routes/_authenticated/index';
import { Route as AuthenticatedProfileRouteImport } from './routes/_authenticated/profile';

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any);
const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any);
const AuthenticatedIndexRoute = AuthenticatedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthenticatedRoute,
} as any);
const AuthenticatedProfileRoute = AuthenticatedProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => AuthenticatedRoute,
} as any);

export interface FileRoutesByFullPath {
  '/login': typeof LoginRoute;
  '/profile': typeof AuthenticatedProfileRoute;
  '/': typeof AuthenticatedIndexRoute;
}
export interface FileRoutesByTo {
  '/login': typeof LoginRoute;
  '/profile': typeof AuthenticatedProfileRoute;
  '/': typeof AuthenticatedIndexRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  '/_authenticated': typeof AuthenticatedRouteWithChildren;
  '/login': typeof LoginRoute;
  '/_authenticated/profile': typeof AuthenticatedProfileRoute;
  '/_authenticated/': typeof AuthenticatedIndexRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: '/login' | '/profile' | '/';
  fileRoutesByTo: FileRoutesByTo;
  to: '/login' | '/profile' | '/';
  id: '__root__' | '/_authenticated' | '/login' | '/_authenticated/profile' | '/_authenticated/';
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren;
  LoginRoute: typeof LoginRoute;
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login';
      path: '/login';
      fullPath: '/login';
      preLoaderRoute: typeof LoginRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/_authenticated': {
      id: '/_authenticated';
      path: '';
      fullPath: '';
      preLoaderRoute: typeof AuthenticatedRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/_authenticated/': {
      id: '/_authenticated/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof AuthenticatedIndexRouteImport;
      parentRoute: typeof AuthenticatedRoute;
    };
    '/_authenticated/profile': {
      id: '/_authenticated/profile';
      path: '/profile';
      fullPath: '/profile';
      preLoaderRoute: typeof AuthenticatedProfileRouteImport;
      parentRoute: typeof AuthenticatedRoute;
    };
  }
}

interface AuthenticatedRouteChildren {
  AuthenticatedProfileRoute: typeof AuthenticatedProfileRoute;
  AuthenticatedIndexRoute: typeof AuthenticatedIndexRoute;
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedProfileRoute: AuthenticatedProfileRoute,
  AuthenticatedIndexRoute: AuthenticatedIndexRoute,
};

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
);

const rootRouteChildren: RootRouteChildren = {
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  LoginRoute: LoginRoute,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
